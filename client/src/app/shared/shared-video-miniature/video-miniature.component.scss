@use '_variables' as *;
@use '_mixins' as *;
@use '_miniature' as *;

$more-button-width: 40px;

.video-miniature {
  --fs-small: 0.75rem;
  --fs-medium: 0.875rem;
  --fs-big: 1rem;
}

.video-name {
  font-size: var(--fs-big);

  @include miniature-name;
}

.video-info {
  width: calc(100% - #{$more-button-width});

  display: grid;
}

.owner {
  display: flex;
  position: relative;
  font-size: var(--fs-medium);
}

.date-and-views,
.video-info-privacy,
.badges {
  font-size: var(--fs-small);
}

.date-and-views {
  color: pvar(--main-fg-300);
}

.owner-label {
  display: block;
  color: pvar(--main-fg-500);

  @include disable-default-a-behaviour;
  @include ellipsis;

  &:hover {
    color: pvar(--main-fg-600);
  }
}

.video-actions {
  width: $more-button-width;
  height: 30px;

  ::ng-deep .dropdown-root:not(.show) {
    opacity: 0;
  }

  ::ng-deep .playlist-dropdown.show + my-action-dropdown .dropdown-root {
    opacity: 1;
  }

  ::ng-deep .more-icon {
    opacity: .6;

    &:hover {
      opacity: 1;
    }
  }
}

.video-miniature:hover,
.video-miniature:focus-within {
  my-video-thumbnail ::ng-deep .actions-overlay,
  .video-actions ::ng-deep .dropdown-root {
    opacity: 1 !important;
  }
}

.video-bottom {
  display: flex;
  min-width: 1px;
}

// Grid mode
// Takes all the width on mobile
.video-miniature:not(.display-as-row) {
  display: flex;
  flex-direction: column;
  padding-bottom: 1rem;
  width: 100%;

  my-video-thumbnail {
    margin-bottom: 0.35rem;

    @include block-ratio($selector: '::ng-deep .video-thumbnail');
  }

  .video-bottom {
    width: 100%;
  }

  &.has-avatar .video-bottom {
    @include padding-left(0.75rem);
  }

  my-actor-avatar {
    border: 2px solid pvar(--bg);
    position: absolute;
    top: -20px;
    background: pvar(--bg);

    @include left(-2px);

    &[actorType=account] {
      // TODO: use SASS var in sync with thumbnail component
      border-radius: 100%;
    }

    &[actorType=channel] {
      // TODO: use SASS var in sync with thumbnail component
      border-radius: 5px;
    }

    & + .owner-label {
      // Keep 34px in sync with the component
      @include margin-left(calc(0.5rem + 34px));
    }
  }

  .date-and-views {
    margin-top: 3px;
  }

  .video-actions {
    margin-top: 3px;
  }

  @media screen and (max-width: $small-view) {
    width: 100%;
    margin-bottom: 25px;

    .video-info {
      margin: 0 10px;

      width: 100%;
      text-align: left;
    }

    .video-actions {
      margin: 0;
      top: -3px;
      width: auto;

      ::ng-deep .dropdown-root {
        opacity: 1 !important;
      }
    }

    ::ng-deep .video-thumbnail {
      border-radius: 0;
    }
  }
}

.video-miniature.display-as-row {
  --fs-small: 0.875rem;
  --fs-medium: 1rem;
  --fs-big: 1.25rem;

  --rowThumbnailWidth: #{$video-thumbnail-width};
  --rowThumbnailHeight: #{$video-thumbnail-height};

  display: flex;
  flex-direction: row;

  my-video-thumbnail {
    min-width: var(--rowThumbnailWidth);
    max-width: var(--rowThumbnailWidth);
    height: var(--rowThumbnailHeight);

    @include margin-right(1rem);
  }

  .video-info {
    grid-template-rows: auto;
    height: min-content;
  }

  .video-name {
    grid-row: 1;
  }

  .date-and-views {
    grid-row: 2;
  }

  .owner {
    grid-row: 3;
    align-items: center;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }

  my-actor-avatar + .owner-label {
    @include margin-left(0.5rem);
  }

  .video-actions {
    margin-top: -3px;
  }
}

.badges {
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
  font-size: 1rem;
  margin-top: 0.25rem;
}

@include on-small-main-col {
  .video-miniature.display-as-row {
    --rowThumbnailWidth: #{$video-thumbnail-medium-width};
    --rowThumbnailHeight: #{$video-thumbnail-medium-height};
  }
}

@include on-mobile-main-col {
  .video-miniature.display-as-row {
    --rowThumbnailWidth: #{$video-thumbnail-small-width};
    --rowThumbnailHeight: #{$video-thumbnail-small-height};
  }
}
